@model PasswordHashingApp.Models.HashComparisonViewModel
@{
    ViewData["Title"] = "Password Hashing Comparison Tool";
}

<div class="container mt-4">
    <div class="text-center mb-4">
        <h1 class="display-4">Password Hashing Comparison Tool</h1>
        <p class="lead">Compare different password hashing algorithms and understand their strengths and weaknesses</p>
    </div>

    <!-- Password Input Form -->
    <div class="card mb-4">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">Test Password Hashing</h3>
        </div>
        <div class="card-body">
            <form asp-action="CompareHashes" method="post">
                <div class="mb-3">
                    <label for="password" class="form-label">Enter a password to hash:</label>
                    <input type="text" class="form-control" id="password" name="password" 
                           placeholder="Enter any password..." value="@Model?.InputPassword" required>
                    <small class="form-text text-muted">This is for demonstration only. Your password is not stored.</small>
                </div>
                <button type="submit" class="btn btn-primary btn-lg">Compare All Hashing Algorithms</button>
            </form>
        </div>
    </div>

    <!-- Results Section -->
    @if (Model?.Results != null && Model.Results.Any())
    {
        <div class="card mb-4">
            <div class="card-header bg-success text-white">
                <h3 class="mb-0">Hash Comparison Results</h3>
            </div>
            <div class="card-body">
                <div class="alert alert-info">
                    <strong>Input Password:</strong> <code>@Model.InputPassword</code>
                </div>

                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Algorithm</th>
                                <th>Hashed Value</th>
                                <th>Execution Time</th>
                                <th>Hash Length</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var result in Model.Results.Values.OrderBy(r => r.AlgorithmName))
                            {
                                <tr>
                                    <td><strong>@result.AlgorithmName</strong></td>
                                    <td>
                                        <code class="hash-value" style="word-break: break-all; font-size: 0.85em;">
                                            @(result.HashedValue.Length > 80 ? result.HashedValue.Substring(0, 80) + "..." : result.HashedValue)
                                        </code>
                                    </td>
                                    <td>
                                        <span class="badge bg-info">@result.ExecutionTimeMs ms</span>
                                    </td>
                                    <td>@result.HashLength chars</td>
                                    <td>
                                        <button class="btn btn-sm btn-outline-primary copy-btn" 
                                                data-hash="@result.HashedValue">
                                            📋 Copy
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }

    <!-- Algorithm Information Section -->
    <div class="mb-4">
        <h2 class="text-center mb-4">Password Hashing Algorithms Explained</h2>
        
        @if (Model?.AlgorithmInfos != null)
        {
            @foreach (var algo in Model.AlgorithmInfos)
            {
                <div class="card mb-3">
                    <div class="card-header" style="background-color: @GetColorForAlgorithm(algo.Name);">
                        <h4 class="mb-0 text-white">@algo.Name</h4>
                    </div>
                    <div class="card-body">
                        <p class="card-text">@algo.Description</p>
                        
                        <div class="row">
                            <div class="col-md-6">
                                <h5 class="text-success">✓ Advantages</h5>
                                <ul>
                                    @foreach (var advantage in algo.Advantages)
                                    {
                                        <li>@advantage</li>
                                    }
                                </ul>
                            </div>
                            <div class="col-md-6">
                                <h5 class="text-danger">✗ Disadvantages</h5>
                                <ul>
                                    @foreach (var disadvantage in algo.Disadvantages)
                                    {
                                        <li>@disadvantage</li>
                                    }
                                </ul>
                            </div>
                        </div>

                        <div class="row mt-3">
                            <div class="col-md-6">
                                <p><strong>Security Level:</strong> 
                                    <span class="badge @GetBadgeClass(algo.SecurityLevel)">@algo.SecurityLevel</span>
                                </p>
                            </div>
                            <div class="col-md-6">
                                <p><strong>Best Use Case:</strong> @algo.UseCase</p>
                            </div>
                        </div>

                        <div class="mt-3">
                            <button class="btn btn-info" type="button" data-bs-toggle="collapse" 
                                    data-bs-target="#code-@algo.Name.Replace("-", "").Replace(" ", "")" 
                                    aria-expanded="false">
                                📝 View Code Example
                            </button>
                        </div>

                        <div class="collapse mt-3" id="code-@algo.Name.Replace("-", "").Replace(" ", "")">
                            <div class="card card-body bg-light">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6>C# Code Example:</h6>
                                    <button class="btn btn-sm btn-success copy-code-btn" 
                                            data-code="@algo.CodeExample">
                                        📋 Copy Code
                                    </button>
                                </div>
                                <pre><code class="language-csharp">@algo.CodeExample</code></pre>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Summary and Recommendations -->
    <div class="card bg-light mb-4">
        <div class="card-body">
            <h3>🎯 Recommendations</h3>
            <div class="row">
                <div class="col-md-4">
                    <div class="card h-100">
                        <div class="card-body text-center">
                            <h5 class="text-success">✓ Best Choice</h5>
                            <h4>Argon2</h4>
                            <p>For new applications requiring maximum security</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card h-100">
                        <div class="card-body text-center">
                            <h5 class="text-primary">✓ Good Choice</h5>
                            <h4>BCrypt</h4>
                            <p>For general-purpose web applications</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card h-100">
                        <div class="card-body text-center">
                            <h5 class="text-danger">✗ Avoid</h5>
                            <h4>SHA-256/512</h4>
                            <p>Do NOT use for password storage</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Copy hash functionality
        document.querySelectorAll('.copy-btn').forEach(button => {
            button.addEventListener('click', function() {
                const hash = this.getAttribute('data-hash');
                navigator.clipboard.writeText(hash).then(() => {
                    const originalText = this.textContent;
                    this.textContent = '✓ Copied!';
                    this.classList.remove('btn-outline-primary');
                    this.classList.add('btn-success');
                    
                    setTimeout(() => {
                        this.textContent = originalText;
                        this.classList.remove('btn-success');
                        this.classList.add('btn-outline-primary');
                    }, 2000);
                });
            });
        });

        // Copy code functionality
        document.querySelectorAll('.copy-code-btn').forEach(button => {
            button.addEventListener('click', function() {
                const code = this.getAttribute('data-code');
                navigator.clipboard.writeText(code).then(() => {
                    const originalText = this.textContent;
                    this.textContent = '✓ Copied!';
                    
                    setTimeout(() => {
                        this.textContent = originalText;
                    }, 2000);
                });
            });
        });
    </script>
}

@functions {
    string GetColorForAlgorithm(string name)
    {
        return name switch
        {
            "SHA-256" => "#dc3545",
            "SHA-512" => "#dc3545",
            "BCrypt" => "#198754",
            "PBKDF2" => "#0d6efd",
            "Argon2" => "#198754",
            _ => "#6c757d"
        };
    }

    string GetBadgeClass(string securityLevel)
    {
        if (securityLevel.Contains("Very High")) return "bg-success";
        if (securityLevel.Contains("High")) return "bg-success";
        if (securityLevel.Contains("Medium")) return "bg-warning";
        if (securityLevel.Contains("Low")) return "bg-danger";
        return "bg-secondary";
    }
}

